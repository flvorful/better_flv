// BetterFLV: BetterFLV.as// Author: Jake Varghese// Company: FLVorful// (C) 2007// Released under GPLv2package{	import flash.display.MovieClip	import fl.video.*	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.events.MouseEvent	import fl.video.FLVPlayback	import flash.events.*	import flash.net.*	import flash.utils.*	import flash.text.TextField;	import flash.display.Stage	import Skin	public class BetterFLV extends FLVPlayback	{		public var _new_skin:Skin		public var skin_has_loaded:Boolean = false		private var tracer:Tracer = new Tracer()		private	var stupid_counter:Number = 0		public function BetterFLV()		{			this.addEventListener(VideoEvent.PLAYHEAD_UPDATE, handle_playhead_update)			this.addEventListener(Event.ENTER_FRAME, fill_buffer_bar)			this.addEventListener(VideoEvent.SKIN_LOADED, skin_is_loaded);						this.name = "main_player"			this.x = 0;			this.y = 0;			this.height = 480			this.width = 720			this.visible = true;			this.autoPlay = false;			this.align = VideoAlign.TOP					}		public function replay() : void {			this.seek(0)			this.play()		}		public function set_skin(skin_url:String):*{			this.addEventListener(VideoEvent.SKIN_LOADED, skin_loaded, true)			_new_skin = new Skin(skin_url, this)						addChild(_new_skin)		}				public function get_skin():Skin{			return _new_skin		}		// positions the skin relative to the bottom of the FLVPlayer		// TODO:  Add more positions		public function position_skin(position:String = "bottom"):void{			if (skin_has_loaded){				switch (position) { 					case "bottom" : 					tracer.t("setting bottom orientation for skin") 					_new_skin.y = this.height					default : 				}				stretch_background()				position_buttons()			}		}		public function position_skin_absolutely(x:Number = 0, y:Number = 0):void{			if (skin_has_loaded){				reposition_skin(x, y)				stretch_background()				position_buttons()			}		}		public function reposition_skin(x:Number = 0, y:Number = 0) : void {			_new_skin.y = y			_new_skin.x = x		}		public function toggle_skin_for_fullscreen(x:Number = 0, y:Number = 0) : void {			reposition_skin(x, y)			stretch_background()			set_x_for_buttons()			set_x_for_buffering_bars()		}		public function position_buttons():void{			set_y_for_buttons()			set_x_for_buttons()			hide_extra_buttons()			set_buffering_bars()			set_default_values()		}		public function embed_code_button_clicked(event:MouseEvent):void{			tracer.t("Got embed code click")			tracer.t(event.target)			dispatchEvent(new MouseEvent(MouseEvent.CLICK))		}				public function play_button_clicked(event:MouseEvent):void{			_new_skin.play_button.visible = false			_new_skin.pause_button.visible = true			this.play()		}				public function pause_button_clicked(event:MouseEvent):void{			_new_skin.play_button.visible = true			_new_skin.pause_button.visible = false			this.pause()		}				public function stop_button_clicked(event:MouseEvent):void{			this.stop()		}				public function full_screen_button_clicked(event:MouseEvent):void{			toggle_full_screen()			dispatchEvent(new FullScreenEvent("fullScreen"))		}				private function skin_is_loaded(event:Event):void		{			this.position_skin_absolutely(this.x, this.height);			if (this.totalTime)			{				this.set_time_for_skin(0, this.totalTime);			}		}				private function toggle_full_screen():void {			switch(stage.displayState) {				case "normal":				stage.displayState = "fullScreen";    				break;				case "fullScreen":				default:				stage.displayState = "normal";    				break;			}		}		public function volume_full_button_clicked(event:MouseEvent):void{			tracer.t("Got volume full click")			tracer.t(event.target)			this.volume = 0.50			hide_volume_buttons()			_new_skin.volume_medium_button.visible = true		}		public function volume_medium_button_clicked(event:MouseEvent):void{			tracer.t("Got volume medium click")			tracer.t(event.target)			this.volume = 0.1			hide_volume_buttons()			_new_skin.volume_low_button.visible = true		}		public function volume_low_button_clicked(event:MouseEvent):void{			tracer.t("Got volume low screen click")			tracer.t(event.target)			this.volume = 0.0			hide_volume_buttons()			_new_skin.volume_mute_button.visible = true		}		public function volume_mute_button_clicked(event:MouseEvent):void{			tracer.t("Got volume mute click")			tracer.t(event.target)			this.volume = 1			hide_volume_buttons()			_new_skin.volume_full_button.visible = true		}		public function buffering_bar_clicked(event:MouseEvent):void{			tracer.t("Got buffering bar click")			tracer.t(event)			//TODO:  For some reason the right side of the click boundary is less than the width of the buffering bar.  I still dont know why, so i had to hack it.			var seek_percent = (event.localX / 324) * 100;			this.seekPercent(seek_percent)		}		private function stretch_background():void{			if (skin_has_loaded){				_new_skin.skin_background.width = this.width			}		}		private function hide_extra_buttons() : void {			hide_volume_buttons()			_new_skin.volume_full_button.visible = true			_new_skin.pause_button.visible = false		}		private function hide_volume_buttons() : void {			_new_skin.volume_medium_button.visible = false			_new_skin.volume_low_button.visible = false			_new_skin.volume_mute_button.visible = false			_new_skin.volume_full_button.visible = false		}		private function set_x_for_buttons():void{			var fsb_width : Number = 28;			_new_skin.play_button.x = 10			_new_skin.pause_button.x = _new_skin.play_button.x			_new_skin.stop_button.x = _new_skin.play_button.width + 5 + 10						if (_new_skin.full_screen_button){				_new_skin.full_screen_button.x = _new_skin.skin_background.width - fsb_width - 10			}			if (_new_skin.embed_code_button){				_new_skin.embed_code_button.x = _new_skin.full_screen_button.x - _new_skin.embed_code_button.width - 5			}			if (_new_skin.volume_full_button){				_new_skin.volume_full_button.x = _new_skin.embed_code_button.x - _new_skin.volume_full_button.width - 5			}			if (_new_skin.volume_medium_button){				_new_skin.volume_medium_button.x = _new_skin.volume_full_button.x 			}			if (_new_skin.volume_low_button){				_new_skin.volume_low_button.x = _new_skin.volume_full_button.x 			}			if (_new_skin.volume_mute_button){				_new_skin.volume_mute_button.x = _new_skin.volume_full_button.x 			}			if (_new_skin.timer_display){				_new_skin.timer_display.x = _new_skin.volume_full_button.x - _new_skin.timer_display.width - 7			}			}		private function set_y_for_buttons():void{			_new_skin.play_button.y = (_new_skin.height - _new_skin.play_button.height) / 2			_new_skin.pause_button.y = _new_skin.play_button.y			_new_skin.stop_button.y = (_new_skin.height - _new_skin.stop_button.height) / 2						if (_new_skin.full_screen_button){				_new_skin.full_screen_button.y = (_new_skin.height - _new_skin.full_screen_button.height) / 2			}			if (_new_skin.embed_code_button){				_new_skin.embed_code_button.y = (_new_skin.height - _new_skin.embed_code_button.height) / 2			}			if (_new_skin.volume_full_button){				_new_skin.volume_full_button.y = (_new_skin.height - _new_skin.volume_full_button.height) / 2			}			if (_new_skin.volume_medium_button){				_new_skin.volume_medium_button.y = (_new_skin.height - _new_skin.volume_medium_button.height) / 2			}			if (_new_skin.volume_low_button){				_new_skin.volume_low_button.y = (_new_skin.height - _new_skin.volume_low_button.height) / 2			}			if (_new_skin.volume_mute_button){					_new_skin.volume_mute_button.y = (_new_skin.height - _new_skin.volume_mute_button.height) / 2			}			if (_new_skin.timer_display){				_new_skin.timer_display.y = (_new_skin.height - _new_skin.timer_display.height) / 2			}		}		private function has_buffering_bars() : Boolean {			if (skin_has_loaded && _new_skin.buffering_bar && _new_skin.buffering_bar_filled){				return true			}			return false		}		private function set_buffering_bars():void{			if (has_buffering_bars()){				set_x_for_buffering_bars()				set_y_for_buffering_bars()			}					}		private function set_x_for_buffering_bars() : void {			_new_skin.buffering_bar.x = _new_skin.stop_button.x + _new_skin.stop_button.width + 7			_new_skin.buffering_bar_filled.x = _new_skin.buffering_bar.x			_new_skin.seek_handle.x = _new_skin.buffering_bar.x			_new_skin.buffering_bar.width = _new_skin.timer_display.x - _new_skin.buffering_bar.x - 7			if (this.bytesLoaded == this.bytesTotal){				_new_skin.buffering_bar_filled.width = _new_skin.buffering_bar.width			}		}		private function set_y_for_buffering_bars() : void {			_new_skin.buffering_bar.y = ((_new_skin.height - _new_skin.buffering_bar.height) / 2) - 3			_new_skin.buffering_bar_filled.y = _new_skin.buffering_bar.y			_new_skin.seek_handle.y = _new_skin.buffering_bar.y + _new_skin.buffering_bar.height + 3		}		private function set_default_values() : void {			tracer.t("setting default values")			this.seekBar = _new_skin.seek_handle		}		private function fill_buffer_bar(event:Event) : void {			if (has_buffering_bars()){				var final_width = _new_skin.buffering_bar.width				if (skin_has_loaded && (this.bytesLoaded == this.bytesTotal)){					var myTween:Tween = new Tween(_new_skin.buffering_bar_filled, "width", Regular.easeOut, _new_skin.buffering_bar_filled.width, final_width, 10, false);					if (stupid_counter % 24 == 0){						this.removeEventListener(Event.ENTER_FRAME, fill_buffer_bar)					}				}				else if(skin_has_loaded) {					if (_new_skin.buffering_bar){						if (stupid_counter % 12 == 0){							var myTween:Tween = new Tween(_new_skin.buffering_bar_filled, "width", Regular.easeOut, _new_skin.buffering_bar_filled.width, final_width * (this.bytesLoaded / this.bytesTotal) , 12, false);						}					}				}				stupid_counter += 1			}					}		/******************		*	Events		*			*******************/		public function skin_loaded(event:Event):void{			tracer.t("Positioning Skin")			this.parent.stage.stageHeight = this.height + this._new_skin.skin_background.height			this.parent.stage.stageWidth = this.width			position_skin()			skin_has_loaded = true						dispatchEvent(new VideoEvent("skinLoaded"))		}		public function handle_playhead_update(event:VideoEvent) : void {					if (skin_has_loaded){				if (_new_skin.seek_handle){					_new_skin.seek_handle.x = _new_skin.buffering_bar.x + ((this.playheadPercentage / 100) * _new_skin.buffering_bar.width)				}				set_time_for_skin(event.playheadTime, this.totalTime)							}			}				public function set_time_for_skin(dur:Number, total_time:Number = 0):void{			var et:TextField = TextField(_new_skin.timer_display.getChildByName("elapsed_timer_txt"))			et.text = convert_time(dur)			if (total_time != 0){				var tt:TextField = TextField(_new_skin.timer_display.getChildByName("total_timer_txt"))				tt.text = convert_time(total_time)			}		}		public function convert_time(duration:Number):String{			var minutes2 = Math.floor(duration / 60);			var seconds2 = Math.floor(duration % 60);			if (seconds2 < 10) {				seconds2 = "0" + seconds2;			}			if (minutes2 < 10) {				minutes2 = "0" + minutes2;			}			return minutes2 + ":" + seconds2;		}	}}